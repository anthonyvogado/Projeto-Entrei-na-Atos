// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEndAPI.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEndAPI.Models.Classe", b =>
                {
                    b.Property<int>("ClasseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClasseId"));

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClasseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("BackEndAPI.Models.ContraIndicadoTag", b =>
                {
                    b.Property<int>("ContraIndicadoTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContraIndicadoTagId"));

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContraIndicadoTagId");

                    b.ToTable("ContraIndicadoTags");
                });

            modelBuilder.Entity("BackEndAPI.Models.IndicadoTag", b =>
                {
                    b.Property<int>("IndicadoTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndicadoTagId"));

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndicadoTagId");

                    b.ToTable("IndicadoTags");
                });

            modelBuilder.Entity("BackEndAPI.Models.Medicamento", b =>
                {
                    b.Property<int>("MedicamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicamentoId"));

                    b.Property<string>("Bula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClasseId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Posologia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoId")
                        .HasColumnType("int");

                    b.HasKey("MedicamentoId");

                    b.HasIndex("ClasseId");

                    b.HasIndex("TipoId");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("BackEndAPI.Models.Tipo", b =>
                {
                    b.Property<int>("TipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoId"));

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoId");

                    b.ToTable("Tipos");
                });

            modelBuilder.Entity("MedicamentoContraIndicadoTag", b =>
                {
                    b.Property<int>("ContraIndicadoTagsContraIndicadoTagId")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentosMedicamentoId")
                        .HasColumnType("int");

                    b.HasKey("ContraIndicadoTagsContraIndicadoTagId", "MedicamentosMedicamentoId");

                    b.HasIndex("MedicamentosMedicamentoId");

                    b.ToTable("MedicamentoContraIndicadoTag");
                });

            modelBuilder.Entity("MedicamentoIndicadoTag", b =>
                {
                    b.Property<int>("IndicadoTagsIndicadoTagId")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentosMedicamentoId")
                        .HasColumnType("int");

                    b.HasKey("IndicadoTagsIndicadoTagId", "MedicamentosMedicamentoId");

                    b.HasIndex("MedicamentosMedicamentoId");

                    b.ToTable("MedicamentoIndicadoTag");
                });

            modelBuilder.Entity("BackEndAPI.Models.Medicamento", b =>
                {
                    b.HasOne("BackEndAPI.Models.Classe", "Classe")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Models.Tipo", "Tipo")
                        .WithMany("Medicamentos")
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("MedicamentoContraIndicadoTag", b =>
                {
                    b.HasOne("BackEndAPI.Models.ContraIndicadoTag", null)
                        .WithMany()
                        .HasForeignKey("ContraIndicadoTagsContraIndicadoTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Models.Medicamento", null)
                        .WithMany()
                        .HasForeignKey("MedicamentosMedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicamentoIndicadoTag", b =>
                {
                    b.HasOne("BackEndAPI.Models.IndicadoTag", null)
                        .WithMany()
                        .HasForeignKey("IndicadoTagsIndicadoTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Models.Medicamento", null)
                        .WithMany()
                        .HasForeignKey("MedicamentosMedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndAPI.Models.Classe", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("BackEndAPI.Models.Tipo", b =>
                {
                    b.Navigation("Medicamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
